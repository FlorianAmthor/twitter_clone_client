{"version":3,"sources":["app.js","environment.js","home.js","main.js","resources/index.js","services/async-http-client.js","services/fixtures.js","services/messages.js","services/tweet-service.js","viewmodels/createTweet/createTweet.js","viewmodels/dashboard/dashboard.js","viewmodels/login/login.js","viewmodels/logout/logout.js","viewmodels/otherProfile/otherProfile.js","viewmodels/profile/profile.js","viewmodels/settings/settings.js","viewmodels/signup/signup.js","viewmodels/tweetList/tweetList.js","viewmodels/userList/userList.js","C:/Users/famth/WebstormProjects/twitter_clone_client/src/app.html","C:/Users/famth/WebstormProjects/twitter_clone_client/src/home.html","C:/Users/famth/WebstormProjects/twitter_clone_client/src/nav-bar.html","C:/Users/famth/WebstormProjects/twitter_clone_client/src/viewmodels/createTweet/createTweet.html","C:/Users/famth/WebstormProjects/twitter_clone_client/src/viewmodels/dashboard/dashboard.html","C:/Users/famth/WebstormProjects/twitter_clone_client/src/viewmodels/login/login.html","C:/Users/famth/WebstormProjects/twitter_clone_client/src/viewmodels/logout/logout.html","C:/Users/famth/WebstormProjects/twitter_clone_client/src/viewmodels/otherProfile/otherProfile.html","C:/Users/famth/WebstormProjects/twitter_clone_client/src/viewmodels/profile/profile.html","C:/Users/famth/WebstormProjects/twitter_clone_client/src/viewmodels/settings/settings.html","C:/Users/famth/WebstormProjects/twitter_clone_client/src/viewmodels/signup/signup.html","C:/Users/famth/WebstormProjects/twitter_clone_client/src/viewmodels/tweetList/tweetList.html","C:/Users/famth/WebstormProjects/twitter_clone_client/src/viewmodels/userList/userList.html"],"names":["App","ts","au","ea","tweetService","subscribe","msg","status","success","router","navigate","replace","trigger","reset","deactivate","setRoot","then","navigateToRoute","configureRouter","config","map","route","name","moduleId","nav","title","mapUnknownRoutes","attached","isAuthenticated","debug","testing","Home","aurelia","configure","Promise","longStackTraces","warnings","wForgottenReturn","use","standardConfiguration","feature","developmentLogging","plugin","start","AsyncHttpClient","httpClient","fixtures","http","withBaseUrl","baseUrl","get","url","post","obj","delete","authenticate","user","response","content","localStorage","tweet","JSON","stringify","configuration","withHeader","token","publish","catch","message","authenticated","auth","parse","clearAuthentication","Fixtures","LoginStatus","Tweets","tweets","TweetService","ac","users","comments","loggedInUser","getUsers","res","getTweets","publishTweets","getComments","login","email","password","getLoggedInUser","getUserTweets","_id","getTweetsOfUser","logout","undefined","register","firstName","lastName","newUser","updateUser","date","author","returnedTweet","unshift","deleteTweet","tweetToRemove","find","splice","indexOf","Tweet","createTweet","Date","now","Dashboard","activate","params","routeConfig","resolve","reject","u","Login","e","console","log","Logout","OtherProfile","currentUser","Profile","navModel","Settings","Signup","TweetList","subscribeOnce","length","push","UserList"],"mappings":"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","file":"app-bundle.js","sourcesContent":["import {inject, Aurelia} from 'aurelia-framework';\nimport {EventAggregator} from 'aurelia-event-aggregator';\nimport {LoginStatus} from './services/messages';\nimport TweetService from './services/tweet-service';\n\n@inject(TweetService, Aurelia, EventAggregator)\nexport class App {\n\n  constructor(ts, au, ea) {\n    this.au = au;\n    this.tweetService = ts;\n    ea.subscribe(LoginStatus, msg => {\n      if (msg.status.success === true) {\n        this.router.navigate('/', { replace: true, trigger: false });\n        this.router.reset();\n        this.router.deactivate();\n        au.setRoot('home').then(() => {\n          this.router.navigateToRoute('dashboard');\n        });\n      } else {\n        this.router.navigate('/', { replace: true, trigger: false });\n        this.router.reset();\n        this.router.deactivate();\n        au.setRoot('app').then(() => {\n          this.router.navigateToRoute('login');\n        });\n      }\n    });\n  }\n\n  configureRouter(config, router) {\n    config.map([\n      { route: ['', 'login'], name: 'login', moduleId: './viewmodels/login/login', nav: true, title: 'Login' },\n      { route: 'signup', name: 'signup', moduleId: './viewmodels/signup/signup', nav: true, title: 'Signup' }\n    ]);\n\n    config.mapUnknownRoutes(instruction => {\n      return 'login';\n    });\n\n    this.router = router;\n  }\n\n  attached() {\n    if (this.tweetService.isAuthenticated()) {\n      this.au.setRoot('home').then(() => {\n        this.router.navigateToRoute('dashboard');\n      });\n    }\n  }\n}\n","export default {\r\n  debug: true,\r\n  testing: true\r\n};\r\n","import { inject, Aurelia } from 'aurelia-framework';\n\n@inject(Aurelia)\nexport class Home {\n\n  constructor(au) {\n    this.aurelia = au;\n  }\n\n  configureRouter(config, router) {\n    config.map([\n      { route: ['','dashboard'],  name: 'dashboard', moduleId: './viewmodels/dashboard/dashboard', nav: true, title: 'Dashboard'},\n      { route: 'profile',  name: 'profile', moduleId: './viewmodels/profile/profile', nav: true, title: 'Profile'},\n      { route: 'profile/:_id', name: 'otherProfile',  moduleId: './viewmodels/otherProfile/otherProfile', nav: false, title: ''},\n      { route: 'settings',  name: 'settings', moduleId: './viewmodels/settings/settings', nav: true, title: 'Settings' },\n      { route: 'logout', name: 'logout', moduleId: './viewmodels/logout/logout', nav: true, title: 'Logout' }\n    ]);\n    config.mapUnknownRoutes(instruction => {\n      return 'dashboard';\n    });\n\n    this.router = router;\n  }\n}\n","import environment from './environment';\r\n\r\n//Configure Bluebird Promises.\r\nPromise.config({\r\n  longStackTraces: environment.debug,\r\n  warnings: {\r\n    wForgottenReturn: false\r\n  }\r\n});\r\n\r\nexport function configure(aurelia) {\r\n  aurelia.use\r\n    .standardConfiguration()\r\n    .feature('resources');\r\n\r\n  if (environment.debug) {\r\n    aurelia.use.developmentLogging();\r\n  }\r\n\r\n  if (environment.testing) {\r\n    aurelia.use.plugin('aurelia-testing');\r\n  }\r\n\r\n  aurelia.start().then(() => aurelia.setRoot());\r\n}\r\n","export function configure(config) {\r\n  //config.globalResources([]);\r\n}\r\n","import {inject} from 'aurelia-framework';\nimport {HttpClient} from 'aurelia-http-client';\nimport Fixtures from './fixtures';\nimport {EventAggregator} from 'aurelia-event-aggregator';\nimport {LoginStatus} from './messages';\n\n@inject(HttpClient, Fixtures, EventAggregator )\nexport default class AsyncHttpClient {\n\n  constructor(httpClient, fixtures, ea) {\n    this.http = httpClient;\n    this.http.configure(http => {\n      http.withBaseUrl(fixtures.baseUrl);\n    });\n    this.ea = ea;\n  }\n\n  get(url) {\n    return this.http.get(url);\n  }\n\n  post(url, obj) {\n    return this.http.post(url, obj);\n  }\n\n  delete(url) {\n    return this.http.delete(url);\n  }\n\n  authenticate(url, user) {\n    this.http.post(url, user).then(response => {\n      const status = response.content;\n      if (status.success) {\n        localStorage.tweet = JSON.stringify(response.content);\n        this.http.configure(configuration => {\n          configuration.withHeader('Authorization', 'bearer ' + response.content.token);\n        });\n      }\n      this.ea.publish(new LoginStatus(status));\n    }).catch(error => {\n      const status = {\n        success: false,\n        message: 'service not available'\n      };\n      this.ea.publish(new LoginStatus(status));\n    });\n  }\n\n  isAuthenticated() {\n    let authenticated = false;\n    if (localStorage.tweet !== 'null') {\n      authenticated = true;\n      this.http.configure(http => {\n        const auth = JSON.parse(localStorage.tweet);\n        http.withHeader('Authorization', 'bearer ' + auth.token);\n      });\n    }\n    return authenticated;\n  }\n\n  clearAuthentication() {\n    localStorage.tweet = null;\n      this.http.configure(configuration => {\n      configuration.withHeader('Authorization', '');\n    });\n  }\n}\n","export default class Fixtures {\n  baseUrl = 'https://sheltered-thicket-47173.herokuapp.com';\n}\n","export class LoginStatus{\n  constructor(status){\n    this.status = status;\n  }\n}\n\nexport class Tweets{\n  constructor(tweets){\n    this.tweets = tweets;\n  }\n}\n","import {inject} from 'aurelia-framework';\nimport {Tweets, LoginStatus} from './messages';\nimport {EventAggregator} from 'aurelia-event-aggregator';\nimport AsyncHttpClient from './async-http-client';\n\n@inject(EventAggregator, AsyncHttpClient)\nexport default class TweetService {\n\n  users = [];\n  tweets = [];\n  comments = [];\n  loggedInUser = {};\n\n  constructor(ea, ac) {\n    this.ea = ea;\n    this.ac = ac;\n  }\n\n  getUsers() {\n    this.ac.get('/api/users').then(res => {\n      this.users = res.content;\n    });\n  }\n\n  getTweets() {\n    this.ac.get('/api/tweets').then(res => {\n      this.tweets = res.content;\n      this.publishTweets();\n    });\n  }\n\n  getComments() {\n    this.ac.get('/api/comments').then(res => {\n      this.comments = res.content;\n    });\n  }\n\n  login(email, password) {\n    const user = {\n      email: email,\n      password: password\n    };\n    this.ac.authenticate('/api/users/authenticate', user);\n  }\n\n  getLoggedInUser(){\n    this.ac.get('/api/users/getLoggedInUser').then(res => {\n      this.loggedInUser = res.content;\n    });\n  }\n\n  getUserTweets(){\n    this.ac.get('/api/tweets/users/' + this.loggedInUser._id).then(res => {\n      this.tweets = res.content;\n      this.publishTweets();\n    });\n  }\n\n  getTweetsOfUser(_id){\n    this.ac.get('/api/tweets/users/' + _id).then(res => {\n      this.tweets = res.content;\n      this.publishTweets();\n    });\n  }\n\n  isAuthenticated() {\n    return this.ac.isAuthenticated();\n  }\n\n  logout() {\n    const status = {\n      success: false,\n      message: ''\n    };\n    this.ea.publish(new LoginStatus(status));\n    this.ac.clearAuthentication();\n    this.loggedInUser = undefined;\n  }\n\n  register(firstName, lastName, email, password) {\n    const newUser = {\n      firstName: firstName,\n      lastName: lastName,\n      email: email,\n      password: password\n    };\n    this.ac.post('/api/users', newUser);\n  }\n\n  updateUser(email, password){\n    const newUser = {\n      email: email,\n      password: password\n    }\n\n    this.ac.post('/api/users/' + this.loggedInUser._id +'/update', newUser).then(res => {\n      this.loggedInUser = res.content;\n    });\n  }\n\n  tweet(date, content) {\n    let tweet = {\n      author: '',\n      date: date,\n      content: content,\n    };\n\n    this.ac.post('/api/tweets', tweet).then(res => {\n      const returnedTweet = res.content;\n      this.tweets.unshift(returnedTweet);\n      this.publishTweets();\n    });\n  }\n\n  deleteTweet(_id) {\n    this.ac.delete('/api/tweets/' + _id);\n    let tweetToRemove = this.tweets.find(function(tweet) { return tweet._id == _id;});\n    this.tweets.splice(this.tweets.indexOf(tweetToRemove),1);\n  }\n\n  publishTweets(){\n    this.ea.publish(new Tweets(this.tweets));\n  }\n}\n","import {inject} from 'aurelia-framework';\nimport TweetService from '../../services/tweet-service';\n\n@inject(TweetService)\nexport class Tweet {\n\n  date;\n  content;\n\n  constructor(ts) {\n    this.tweetService = ts;\n  }\n\n  createTweet() {\n    this.date = Date.now();\n    this.tweetService.tweet(this.date, this.content);\n    this.content = null;\n    this.date = null;\n  }\n\n}\n","import {inject} from 'aurelia-framework';\nimport TweetService from '../../services/tweet-service';\n\n@inject(TweetService)\nexport class Dashboard {\n\n  constructor(ts){\n    this.tweetService = ts;\n  }\n\n  activate(params, routeConfig){\n    return new Promise((resolve, reject) => {\n      this.tweetService.getTweets();\n      this.tweetService.getUsers();\n      if (this.tweetService.loggedInUser == undefined){\n        this.tweetService.getLoggedInUser();\n      }\n      let u = this.tweetService.loggedInUser;\n      resolve(u);\n\n    }).then(u => {\n      this.user = u;\n    });\n  }\n}\n","import {inject} from 'aurelia-framework';\nimport TweetService from '../../services/tweet-service';\n\n@inject(TweetService)\nexport class Login {\n\n  email = 'florian@amthor.com';\n  password = 'secret';\n\n  constructor(ts) {\n    this.tweetService = ts;\n  }\n\n  login(e) {\n    console.log(`Trying to log in ${this.email}`);\n    this.tweetService.login(this.email, this.password);\n  }\n}\n","import TweetService from '../../services/tweet-service';\nimport {inject} from 'aurelia-framework';\n\n@inject(TweetService)\nexport class Logout {\n\n  constructor(ts) {\n    this.tweetService = ts;\n  }\n\n  logout() {\n    console.log('logging out');\n    this.tweetService.logout();\n  }\n}\n","import {inject} from 'aurelia-framework';\nimport TweetService from '../../services/tweet-service';\n\n@inject(TweetService)\nexport class OtherProfile{\n\n  tweets = [];\n  currentUser;\n\n  constructor(ts){\n    this.tweetService = ts;\n  }\n\n  activate(params, routeConfig){\n    return new Promise((resolve, reject) => {\n      this.tweetService.getTweetsOfUser(params._id);\n      let u = this.tweetService.users.find(user => {\n        return user._id == params._id;\n      });\n      resolve(u);\n\n    }).then(u => {\n      this.currentUser = u;\n    });\n  }\n}\n","import {inject} from 'aurelia-framework';\nimport TweetService from '../../services/tweet-service';\n\n@inject(TweetService)\nexport class Profile{\n\n  tweets = [];\n  loggedInUser;\n\n  constructor(ts){\n    this.tweetService = ts;\n  }\n\n  activate(params, routeConfig){\n    return new Promise((resolve, reject) => {\n      this.tweetService.getUserTweets();\n      if (this.tweetService.loggedInUser == undefined){\n        this.tweetService.getLoggedInUser();\n      }\n      let u = this.tweetService.loggedInUser;\n      resolve(u);\n\n    }).then(u => {\n      this.loggedInUser = u;\n      routeConfig.navModel.title = this.tweetService.loggedInUser.firstName + ' ' + this.tweetService.loggedInUser.lastName;\n    });\n  }\n}\n","import {inject} from 'aurelia-framework';\nimport TweetService from '../../services/tweet-service';\n\n@inject(TweetService)\nexport class Settings {\n\n  email = '';\n  password = '';\n\n  constructor(ts) {\n    this.tweetService = ts;\n    this.email = this.tweetService.loggedInUser.email;\n    this.password = this.tweetService.loggedInUser.password;\n  }\n\n  updateUser() {\n    this.tweetService.updateUser(this.email, this.password);\n  }\n}\n","import {inject} from 'aurelia-framework';\nimport TweetService from '../../services/tweet-service';\n\n@inject(TweetService)\nexport class Signup {\n\n  firstName = '';\n  lastName = '';\n  email = '';\n  password = '';\n\n  constructor(ts) {\n    this.tweetService = ts;\n  }\n\n  register(e) {\n    this.tweetService.register(this.firstName, this.lastName, this.email, this.password);\n    this.tweetService.login(this.email, this.password);\n  }\n}\n","import {inject} from 'aurelia-framework';\nimport TweetService from '../../services/tweet-service';\nimport {EventAggregator} from 'aurelia-event-aggregator';\nimport {Tweets} from '../../services/messages';\n\n@inject(TweetService, EventAggregator)\nexport class TweetList {\n\n  tweets = [];\n  loggedInUser = {};\n\n  constructor(ts, ea) {\n    this.tweetService = ts;\n    this.tweets = this.tweetService.tweets;\n    this.loggedInUser = this.tweetService.loggedInUser;\n    ea.subscribeOnce(Tweets, msg => {\n      this.tweets.splice(0, this.tweets.length);\n      for (let tweet of msg.tweets){\n        this.tweets.push(tweet);\n      }\n    });\n  }\n\n  deleteTweet(_id){\n   this.tweetService.deleteTweet(_id);\n  }\n}\n","import {inject} from 'aurelia-framework';\nimport TweetService from '../../services/tweet-service';\n\n@inject(TweetService)\nexport class UserList {\n\n  users = [];\n  loggedInUser = {};\n\n  constructor(ts) {\n    this.tweetService = ts;\n    this.users = this.tweetService.users;\n    this.loggedInUser = this.tweetService.loggedInUser;\n  }\n}\n",null,null,null,null,null,null,null,null,null,null,null,null,null],"sourceRoot":"../src"}